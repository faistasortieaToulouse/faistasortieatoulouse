// src/app/api/contact/route.ts
import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import { verifyPayload } from 'altcha-lib';

export const runtime = 'nodejs';

const CONTACT_EMAIL = process.env.CONTACT_EMAIL || 'support@default.com';
const ALTCHA_HMAC_SECRET = process.env.ALTCHA_HMAC_SECRET;

if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
  console.warn('‚ö†Ô∏è Configuration SMTP incompl√®te. V√©rifie tes variables d‚Äôenvironnement.');
}

// Configuration du transport SMTP
const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

export async function POST(request: Request) {
  console.log('üü¢ /api/contact POST re√ßu');

  if (!ALTCHA_HMAC_SECRET) {
    console.error('‚ùå ALTCHA_HMAC_SECRET manquant.');
    return NextResponse.json(
      { message: 'Erreur serveur : cl√© ALTCHA manquante.' },
      { status: 500 }
    );
  }

  try {
    const body = await request.json();
    console.log('üì© Donn√©es re√ßues du formulaire :', body);

    const { name, email, subject, message, altcha } = body;

    if (!altcha) {
      console.warn('‚ö†Ô∏è Jeton ALTCHA manquant.');
      return NextResponse.json(
        { message: 'Veuillez compl√©ter la v√©rification ALTCHA.' },
        { status: 400 }
      );
    }

    // V√©rification ALTCHA
    const isValid = await verifyPayload({ payload: altcha, secret: ALTCHA_HMAC_SECRET });
    console.log('üîç R√©sultat de la v√©rification ALTCHA :', isValid);

    if (!isValid) {
      console.warn('‚ö†Ô∏è √âchec de la v√©rification ALTCHA');
      return NextResponse.json(
        { message: 'V√©rification anti-bot √©chou√©e. Veuillez r√©essayer.' },
        { status: 403 }
      );
    }

    // V√©rifier connexion SMTP
    try {
      await transporter.verify();
      console.log('‚úÖ Connexion SMTP OK');
    } catch (smtpCheckError) {
      console.error('‚ùå Impossible de se connecter au serveur SMTP :', smtpCheckError);
      return NextResponse.json(
        { message: 'Erreur serveur : impossible de se connecter au serveur SMTP.' },
        { status: 500 }
      );
    }

    // Pr√©parer l‚Äôe-mail
    const mailOptions = {
      from: process.env.SMTP_USER,
      to: CONTACT_EMAIL,
      subject: `[CONTACT] ${subject} - De: ${name}`,
      html: `
        <p><strong>De:</strong> ${name} &lt;${email}&gt;</p>
        <p><strong>Sujet:</strong> ${subject}</p>
        <hr>
        <p><strong>Message:</strong></p>
        <p>${message.replace(/\n/g, '<br>')}</p>
        <hr>
        <p><small>Envoy√© via le formulaire de contact du site.</small></p>
      `,
    };

    try {
      await transporter.sendMail(mailOptions);
      console.log(`‚úÖ Message envoy√© avec succ√®s par ${name} <${email}>`);
    } catch (sendError) {
      console.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôe-mail :', sendError);
      return NextResponse.json(
        { message: 'Erreur serveur : impossible d‚Äôenvoyer l‚Äôe-mail.' },
        { status: 500 }
      );
    }

    return NextResponse.json({ message: 'Message envoy√© avec succ√®s !' }, { status: 200 });

  } catch (error: any) {
    console.error('‚ùå Erreur serveur contact :', error);
    return NextResponse.json(
      { message: 'Erreur interne du serveur. Veuillez r√©essayer plus tard.' },
      { status: 500 }
    );
  }
}
